from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone  # Import timezone
from datetime import datetime
from datetime import timedelta

import uuid

# Get the user model
User = get_user_model()

class Meeting(models.Model):
    meeting_id = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)  # Unique ID for the meeting
    title = models.CharField(max_length=255)  # Title of the meeting
    description = models.TextField()  # Description of the meeting
    host = models.ForeignKey(User, on_delete=models.CASCADE)  # Host of the meeting (ForeignKey to User model)
    participants = models.ManyToManyField(User, related_name='meetings', blank=True)  # Participants of the meeting (ManyToMany relationship with User model)
    # Scheduled date and time for the meeting
    scheduled_date = models.DateField() 
    scheduled_time = models.TimeField()
    created_at = models.DateTimeField(auto_now_add=True)  # Timestamp for when the meeting was created
    is_active = models.BooleanField(default=True)  # Flag to track if the meeting is ongoing or ended

    def __str__(self):
        return self.title

    def participant_count(self):
        """Return the count of participants in the meeting."""
        return self.participants.count()
    
    def is_expired(self):
        """Check if the meeting is expired based on scheduled date and time."""
        meeting_datetime = timezone.make_aware(datetime.combine(self.scheduled_date, self.scheduled_time))
        print(f"Meeting scheduled for: {meeting_datetime}, Current time: {timezone.now()}")  # Debug output
        return timezone.now() > meeting_datetime




class MeetingSchedule(models.Model):
    meeting = models.ForeignKey(Meeting, on_delete=models.CASCADE, related_name='schedules')
    scheduled_date = models.DateField()  # Date for the scheduled meeting
    scheduled_time = models.TimeField()  # Time for the scheduled meeting
    invite_emails = models.TextField(blank=True)  # Comma-separated emails for the invitees
    reminder_time = models.TimeField(blank=True, null=True)  # Time for sending reminders
    duration = models.PositiveIntegerField(default=60)  # Duration in minutes
    status_choices = [
        ('upcoming', 'Upcoming'),
        ('completed', 'Completed'),
    ]
    status = models.CharField(max_length=20, choices=status_choices, default='upcoming')

    def __str__(self):
        return f"{self.meeting.title} scheduled for {self.scheduled_date} at {self.scheduled_time}"

    def is_expired(self):
        """Check if the scheduled meeting is expired based on scheduled date and time."""
        meeting_datetime = timezone.make_aware(datetime.combine(self.scheduled_date, self.scheduled_time))
        return timezone.now() > meeting_datetime + timedelta(minutes=self.duration)

    def update_status(self):
        """Update the status of the meeting based on the current time."""
        if self.is_expired():
            self.status = 'completed'
            self.save()
        print(f"Meeting '{self.meeting.title}' status updated to 'completed'.")


class MeetingFeedback(models.Model):
    meeting_schedule = models.ForeignKey(MeetingSchedule, on_delete=models.CASCADE, related_name='feedbacks')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    rating = models.PositiveIntegerField(choices=[(i, str(i)) for i in range(1, 6)])  # 1 to 5 rating
    comment = models.TextField(blank=True, null=True)  # Optional comments

    def __str__(self):
        return f"Feedback from {self.user.username} for {self.meeting_schedule.meeting.title}"

