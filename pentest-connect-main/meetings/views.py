from django.shortcuts import render, redirect
from django.core.mail import send_mail
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404
from django.http import Http404
from meetings.models import Meeting,MeetingSchedule
import logging
import uuid
import traceback
from django.http import JsonResponse
from django.urls import reverse
from django.utils import timezone
from datetime import timedelta
from django.contrib import messages
from datetime import datetime
from django.utils import timezone
from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound

logger = logging.getLogger(__name__)



# =============== Meeting- Home====================
def meeting_home(request):
    if request.method == 'POST':
        try:
            meeting_title = request.POST.get('meeting-title')
            meeting_date = request.POST.get('meeting-date')
            meeting_time = request.POST.get('meeting-time')
            meeting_description = request.POST.get('meeting-description')
            invite_email = request.POST.get('invite-email')

            logger.debug(f"Meeting data: {meeting_title}, {meeting_date}, {meeting_time}, {meeting_description}, {invite_email}")

            if not meeting_title or not meeting_description or not meeting_date or not meeting_time:
                logger.error("All fields are required.")
                messages.error(request, 'All fields are required.')
                return render(request, 'dashboard/meetings/meeting_home.html', {'form_data': request.POST})


            meeting = Meeting.objects.create(
                title=meeting_title,
                description=meeting_description,
                scheduled_date=meeting_date,  # Use the correct field name
                scheduled_time=meeting_time,    # Use the correct field name
                host=request.user,
                meeting_id=uuid.uuid4()
            )

            logger.info(f"Meeting created: {meeting}")

            # Return JSON response with redirect URL
            return JsonResponse({'redirect_url': request.build_absolute_uri(reverse('meetings:join', args=[meeting.meeting_id]))})


        except Exception as e:
            logger.error(f"Error creating meeting: {e}\n{traceback.format_exc()}")
            return JsonResponse({'error': 'Failed to create meeting.'}, status=400)

    return render(request, 'dashboard/meetings/meeting_home.html')


# ================Start-Meeting ==================
@login_required
def start_meeting(request):
    if request.method == 'POST':
        meeting_title = request.POST.get('meeting-title')
        meeting_date = request.POST.get('meeting-date')
        meeting_time = request.POST.get('meeting-time')
        meeting_description = request.POST.get('meeting-description')
        invite_email = request.POST.get('invite-email')
        
        meeting = Meeting.objects.create(
                title=meeting_title,
                description=meeting_description,
                scheduled_date=meeting_date,  # Correctly mapped to the model
                scheduled_time=meeting_time,    # Correctly mapped to the model
                host=request.user,
                meeting_id=uuid.uuid4()
            )



        # Send email invitation
        subject = f"You are invited to a meeting: {meeting.title}"
                # In your start_meeting function
        message = (
                f"Dear User,\n\n"
                f"You have been invited to a meeting.\n\n"
                f"Meeting Title: {meeting.title}\n"
                f"Meeting ID: {meeting.meeting_id}\n"
                f"Date: {meeting.scheduled_date}\n"
                f"Time: {meeting.scheduled_time}\n"
                f"Description: {meeting.description}\n\n"
                f"Join the meeting here: {request.build_absolute_uri(reverse('meetings:join', args=[meeting.meeting_id]))}\n\n"
                f"Best Regards,\n"
                f"Meeting Organizer"
            )


        try:
            send_mail(subject, message, 'your_email@gmail.com', [invite_email])
            logger.info(f"Invitation email sent to {invite_email}")
        except Exception as e:
            logger.error(f"Error sending email: {e}")
            return JsonResponse({'error': 'Failed to send invitation email.'}, status=400)

        # Redirect to the meeting room page
        redirect_url = request.build_absolute_uri(reverse('meetings:join', args=[meeting.meeting_id]))
        return JsonResponse({'redirect_url': redirect_url})  # Return the redirect URL as JSON

    return JsonResponse({'error': 'Invalid request'}, status=400)



# ==============Meeeting-Room ===================
def meeting_room_host(request, meeting_id):
    meeting = get_object_or_404(Meeting, meeting_id=meeting_id)
    
    # Ensure the current user is the host of the meeting
    if meeting.host != request.user:
        messages.error(request, 'You are not authorized to access this meeting as the host.')
        return redirect('meetings:home')  # Redirect to the home page or another appropriate page
    
    participant_count = meeting.participant_count()  # Get the count of participants
    
    context = {
        'meeting': meeting,
        'participant_count': participant_count,
        'user': request.user,
    }
    
    return render(request, 'dashboard/meetings/meeting_room_host.html', context)


# =============== /* Join Meeting *\ =======================
from uuid import UUID
from django.shortcuts import render, redirect
from .models import Meeting
from django.contrib import messages

def join_meeting(request, meeting_id):
    # Validate the meeting_id format
    try:
        meeting_id = UUID(str(meeting_id))  # Convert to UUID
    except ValueError:
        return HttpResponseNotFound("Invalid meeting ID format.")

    if request.method == 'POST':
        participant_email = request.POST.get('participant-email')

        if not participant_email:
            return HttpResponseBadRequest("Participant email is required.")

        try:
            meeting = Meeting.objects.get(meeting_id=meeting_id)
            # Logic for joining the meeting
            messages.success(request, 'Successfully joined the meeting.')
            return redirect('meetings:meeting_room', meeting_id=meeting_id)  # Redirect to the meeting room

        except Meeting.DoesNotExist:
            return HttpResponseNotFound("The meeting ID provided does not exist.")

    return render(request, 'dashboard/meetings/meeting_room.html', {'meeting_id': meeting_id})



# =============== / Meeting Schedule /=======================
def meeting_schedule(request):
    if request.method == 'POST':
        try:
            meeting_title = request.POST.get('meeting-title')
            meeting_description = request.POST.get('meeting-description')
            meeting_date = request.POST.get('meeting-date')
            meeting_time = request.POST.get('meeting-time')
            invite_email = request.POST.get('invite-email')

            logger.debug(f"Meeting data: {meeting_title}, {meeting_date}, {meeting_time}, {meeting_description}, {invite_email}")

            if not all([meeting_title, meeting_description, meeting_date, meeting_time, invite_email]):
                messages.error(request, 'All fields are required.')
                return render(request, 'dashboard/meetings/meeting_home.html', {'form_data': request.POST})

            # Continue with scheduling the meeting
            scheduled_date = datetime.strptime(meeting_date, '%Y-%m-%d').date()
            scheduled_time = datetime.strptime(meeting_time, '%H:%M').time()

            # Create the meeting instance
            meeting_instance = Meeting.objects.create(
                title=meeting_title,
                description=meeting_description,
                host=request.user,
                scheduled_date=scheduled_date,
                scheduled_time=scheduled_time,
            )

            # Create the schedule
            schedule = MeetingSchedule.objects.create(
                meeting=meeting_instance,
                scheduled_date=scheduled_date,
                scheduled_time=scheduled_time,
                invite_emails=invite_email,
                duration=60,
            )

            # Generate the meeting link
            meeting_link = request.build_absolute_uri(reverse('meetings:join', args=[meeting_instance.meeting_id]))

            # Send emails
            send_confirmation_email(request.user.email, meeting_title, schedule, meeting_link)
            send_invitation_email(invite_email, meeting_title, schedule, meeting_link)

            messages.success(request, 'Meeting successfully scheduled!')
            return redirect('meetings:home')

        except ValueError as ve:
            logger.error(f"ValueError: {str(ve)}")
            messages.error(request, 'Invalid date or time format. Please check your input.')
            return render(request, 'dashboard/meetings/meeting_home.html', {'form_data': request.POST})

        except Exception as e:
            logger.error(f"Error scheduling meeting: {str(e)}")
            messages.error(request, f'Failed to schedule meeting: {str(e)}')
            return render(request, 'dashboard/meetings/meeting_home.html', {'form_data': request.POST})

    # Fetch upcoming and past meetings
    upcoming_meetings = MeetingSchedule.objects.filter(meeting__host=request.user, status='upcoming')
    past_meetings = MeetingSchedule.objects.filter(meeting__host=request.user, status='completed')
    scheduled_meetings = MeetingSchedule.objects.filter(meeting__host=request.user)

    return render(request, 'dashboard/meetings/meeting_schedule.html', {
        'upcoming_meetings': upcoming_meetings,
        'past_meetings': past_meetings,
        'scheduled_meetings':scheduled_meetings
    })



#========================/ Email Functions / =================================
def send_confirmation_email(user_email, meeting_title, schedule, meeting_link):
    subject = f"You have scheduled a meeting: {meeting_title}"
    message = (
        f"Dear {schedule.meeting.host.username},\n\n"
        f"Your meeting has been successfully scheduled.\n\n"
        f"Meeting Title: {meeting_title}\n"
        f"Meeting ID: {schedule.meeting.meeting_id}\n"  # Use meeting_id instead of id
        f"Date: {schedule.scheduled_date}\n"
        f"Time: {schedule.scheduled_time}\n"
        f"Description: {schedule.meeting.description}\n"
        f"Join the meeting here: {meeting_link} (link valid at meeting time)\n\n"
        f"Best Regards,\n"
        f"Meeting Organizer"
    )
    try:
        send_mail(subject, message, 'your_email@gmail.com', [user_email])
    except Exception as e:
        logger.error(f"Error sending confirmation email: {str(e)}")

# ============= / Send invitation email /======================
def send_invitation_email(invite_email, meeting_title, schedule, meeting_link):
    invite_subject = f"You are invited to a meeting: {meeting_title}"
    invite_message = (
        f"Dear User,\n\n"
        f"You have been invited to a meeting.\n\n"
        f"Meeting Title: {meeting_title}\n"
        f"Meeting ID: {schedule.meeting.meeting_id}\n"  # Use meeting_id instead of id
        f"Date: {schedule.scheduled_date}\n"
        f"Time: {schedule.scheduled_time}\n"
        f"Description: {schedule.meeting.description}\n"
        f"Join the meeting here: {meeting_link} (link valid at meeting time)\n\n"
        f"Best Regards,\n"
        f"Meeting Organizer"
    )
    try:
        send_mail(invite_subject, invite_message, 'your_email@gmail.com', [invite_email])
    except Exception as e:
        logger.error(f"Error sending invitation email: {str(e)}")


# ==================== Scheduling Notification using Celery ==================
def schedule_meeting_notification(email, meeting_title, scheduled_datetime):
    # Calculate 15 minutes before the meeting
    notification_time = scheduled_datetime - timedelta(minutes=15)
    
    # Schedule the notification task 15 minutes before the meeting
    send_meeting_notification_task.apply_async((email, meeting_title), eta=notification_time)

# =============== /* Send Meeting Notification task *\ ===============
from celery import shared_task
@shared_task
def send_meeting_notification_task(email, meeting_title):
    subject = f"Upcoming Meeting Reminder: {meeting_title}"
    message = (
        f"Dear User,\n\n"
        f"This is a reminder that your meeting '{meeting_title}' is coming up shortly.\n\n"
        f"Please get ready for the meeting.\n\n"
        f"Best Regards,\n"
        f"Meeting Organizer"
    )
    send_mail(subject, message, 'your_email@gmail.com', [email])




# ==================== /* Update meeting *\=========================
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse
from .models import MeetingSchedule
from django.contrib import messages

def update_meeting(request):
    if request.method == 'POST':
        meeting_id = request.POST.get('meeting-id')  # Get the meeting ID
        meeting_title = request.POST.get('meeting-title')
        meeting_date = request.POST.get('meeting-date')
        meeting_time = request.POST.get('meeting-time')
        invite_email = request.POST.get('invite-email')

        # Check if the meeting exists
        meeting = get_object_or_404(MeetingSchedule, id=meeting_id)

        # Update the meeting fields
        meeting.title = meeting_title
        meeting.scheduled_date = meeting_date
        meeting.scheduled_time = meeting_time
        meeting.invite_emails = invite_email
        meeting.save()

        return JsonResponse({'success': True})  # Return success response

    return JsonResponse({'success': False, 'error': 'Invalid request method'})






# =============Meeting_Dashboard===========================

def meeting_dashboard(request):
    # Fetch all scheduled meetings for the logged-in user
    scheduled_meetings = MeetingSchedule.objects.filter(meeting__host=request.user)
    content={
       'scheduled_meetings': scheduled_meetings
    }

    # Pass scheduled meetings to the template
    return render(request, 'dashboard/meetings/meeting_dashboard.html',content)

# ======= Delete Meeting =================

def delete_meeting(request, meeting_id):
    print(f"Attempting to delete meeting with ID: {meeting_id}")  # Debugging output
    meeting = get_object_or_404(MeetingSchedule, id=meeting_id)
    
    if meeting.meeting.host == request.user:
        meeting.delete()
        messages.success(request, 'Meeting deleted successfully.')
    else:
        messages.error(request, 'You do not have permission to delete this meeting.')
        
    return redirect('meeting_dashboard')



# =========== Past Meeting =================

def past_meetings(request):
    return render(request, 'dashboard/meetings/past_meetings.html') 
# ============ Meeting Feedback ===========



def meeting_feedback(request):
    return render(request, 'dashboard/meetings/meeting_feedback.html') 


from django.shortcuts import render, redirect, get_object_or_404
from .models import MeetingFeedback, MeetingSchedule
from django.contrib import messages

def submit_feedback(request, meeting_schedule_id):
    if request.method == 'POST':
        meeting_schedule = get_object_or_404(MeetingSchedule, id=meeting_schedule_id)
        rating = request.POST.get('rating')
        comments = request.POST.get('comments')

        # Save feedback
        feedback = MeetingFeedback(meeting_schedule=meeting_schedule, rating=rating, comments=comments, user=request.user)
        feedback.save()

        messages.success(request, 'Thank you for your feedback!')
        return redirect('meetings:home')  # Redirect to home or any desired page

    return redirect('meetings:home')  # In case of a GET request

