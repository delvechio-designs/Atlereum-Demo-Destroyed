import datetime

import stripe
from django.contrib.auth import get_user_model

from authentication.models import Subscription
from orders.models import Offer, Order

User = get_user_model()

YEARLY_PRICE = "price_1NJ7ryHX2pqfBxHa7J44XQ9q"
MONTHLY_PRICE = "price_1NJ7tZHX2pqfBxHa3X7ZaRvC"

stripe.api_key = "sk_test_51GPk4bHX2pqfBxHa6omwXsVWUete2UrHn3c0cqpHWMPpZDmJwH6AM5ID1jGKl5Jx0773Isq9GoJU1IAenN42AlEI00ouNowIfF"
webhook_secret = (
    "whsec_N6VDmTD0jZ1f78fB560SluYuOaRyJ7YG"
)


def create_express_account():
    res = stripe.Account.create(type="express")
    print(res)


def create_account_link():
    res = stripe.AccountLink.create(
        account="acct_1ND4HOH1TQFiSYOk",
        refresh_url="https://example.com/reauth",
        return_url="https://example.com/return",
        type="account_onboarding",
    )
    print(res)


def create_customer(user):
    res = stripe.Customer.create(
        email=user.email,
        name=user.get_full_name,
        # default_payment_method='pm_123456789',
    )

    stripe_customer_id = res["id"]
    print(stripe_customer_id)

    user.stripe_customer_id = stripe_customer_id
    user.save()

    return stripe_customer_id


def get_customer(customer_id):
    return stripe.Customer.retrieve(customer_id)


def create_charge_for_business_activation(user_id, package_type="monthly"):
    price_id = MONTHLY_PRICE
    if package_type == "yearly":
        price_id = YEARLY_PRICE

    user = User.objects.get(id=user_id)

    res = stripe.checkout.Session.create(
        customer=user.get_stripe_customer_id(),
        line_items=[
            {
                "price": price_id,
                "quantity": 1,
            },
        ],
        metadata={
            "user_id": user_id,
            "action_type": "activate_account",
        },
        mode="subscription",
        success_url="http://127.0.0.1:8000/success",
        cancel_url="http://127.0.0.1:8000/cancel",
    )
    return res.get("url")


def create_charge_for_order(offer_id):
    offer = Offer.objects.get(id=offer_id)
    res = stripe.checkout.Session.create(
        mode="payment",
        line_items=[
            {
                "price_data": {
                    "currency": "usd",
                    "unit_amount": int(offer.price * 100),
                    "product_data": {
                        "name": offer.pentest.status,
                        "description": offer.description,
                    },
                },
                "quantity": 1,
            }
        ],
        metadata={
            "offer_id": offer_id,
            "action_type": "accept_offer",
        },
        success_url="http://15.206.12.229/success",
        cancel_url="http://15.206.12.229/cancel",
    )
    print(res)
    return res.get("url")


# payment_intent_data={
#   "application_fee_amount": 123,
#   "transfer_data": {"destination": '{{CONNECTED_ACCOUNT_ID}}'},
# },


def handle_webhook(payload, sig_header):
    event = None
    try:
        event = stripe.Webhook.construct_event(payload, sig_header, webhook_secret)
    except ValueError as error:
        # Invalid payload
        raise error
    except stripe.error.SignatureVerificationError as error:
        # Invalid signature
        raise error

    if event["type"] == "customer.subscription.created":
        subscription = event["data"]["object"]
        customer_id = subscription["customer"]
        user = User.objects.get(stripe_customer_id=customer_id)
        # Create a Subscription model and associate it with the user
        subscription_obj = Subscription.objects.create(
            user=user,
            subscription_id=subscription["id"],
            active_till=datetime.datetime.fromtimestamp(subscription["current_period_end"]),
        )

    elif event["type"] == "customer.subscription.updated":
        subscription = event["data"]["object"]
        subscription_id = subscription["id"]
        subscription_ins = Subscription.objects.get(subscription_id=subscription_id)

        # Update the subscription details as needed
        subscription_ins.active_till = datetime.datetime.fromtimestamp(subscription["current_period_end"])
        subscription_ins.save()

        # Handle any other necessary logic for subscription update

    elif event["type"] == "customer.subscription.deleted":
        subscription = event["data"]["object"]
        subscription_id = subscription["id"]
        subscription_ins = Subscription.objects.get(subscription_id=subscription_id)
        subscription_ins.delete()

    elif event["type"] == "checkout.session.completed":
        checkout_session = event["data"]["object"]
        print(checkout_session)
        metadata = checkout_session["metadata"]
        action_type = metadata["action_type"]

        if action_type == "activate_account":
            pass
            # user_id = metadata["user_id"]
            # user = User.objects.get(id=user_id)
            # user.has_paid = True
            # user.save()
        elif action_type == "accept_offer":
            offer_id = metadata["offer_id"]
            offer = Offer.objects.get(id=offer_id)

            order, created = Order.objects.get_or_create(offer=offer)
            order.buyer = offer.receiver
            order.seller = offer.seller
            order.price = offer.price
            order.delivery_time = offer.delivery_time
            order.save()

            offer.is_accepted = True
            offer.save()
    else:
        print("Unhandled event type {}".format(event["type"]))
