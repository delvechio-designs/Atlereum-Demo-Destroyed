
from django.contrib.postgres.search import SearchVector  # Add for PostgreSQL Search
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import django_on_heroku
import os
from pathlib import Path
from django.contrib import messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
SECRET_KEY = 'django-insecure--j(b*f2f9@v2#0t#cid6b6a1p!hz#j0k36!2-b3csoy7k-wx_-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


CRISPY_TEMPLATE_PACK = "bootstrap4"
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

# Application definition
INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # third parties
    'crispy_forms',  # Ensure this is installed and correctly set
    'crispy_bootstrap4',
    'crispy_bootstrap5',
    'widget_tweaks',
    'channels',
    'rest_framework',
    'corsheaders',
    
    # Our apps
    'authentication.apps.AuthenticationConfig',
    'common.apps.CommonConfig',
    'dashboard.apps.DashboardConfig',
    'assets.apps.AssetsConfig',
    'pentests.apps.PentestsConfig',
    'findings.apps.FindingsConfig',
    'remediations.apps.RemediationsConfig',
    'chat.apps.ChatConfig',
    'blog.apps.BlogConfig',
    'orders.apps.OrdersConfig',
    'earnings.apps.EarningsConfig',
    'notifications.apps.NotificationsConfig',
    'meetings.apps.MeetingsConfig',

]

AUTH_USER_MODEL = 'authentication.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',  # This is crucial for messages to work
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

# Allow all origins (for development only)
CORS_ALLOW_ALL_ORIGINS = True


ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':  [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# settings.py

WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = 'core.asgi.application'

# Remove Redis-related CHANNEL_LAYERS
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}



# Optionally, set Channels-specific settings
# CHANNELS_WORKER_OPTIONS = { ... }

# Ensure you have Redis installed and running




# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / "db.sqlite3",
        'OPTIONS': {
            'timeout': 20,  # Timeout in seconds
        }
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,  # Customize this value to your preference
        },
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Activate Django-Heroku
django_on_heroku.settings(locals())



# django_on_heroku.settings(locals(), staticfiles=False)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.neomail.com'  # Replace with the actual SMTP host for NeoMail
EMAIL_PORT = 587  # Typically 587 for TLS or 465 for SSL
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'joshua@atlereum.com'  # Replace with the email address you want to use for sending emails
EMAIL_HOST_PASSWORD = 'EvieLinda1!' # Replace with the password or app-specific password for the email address
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# Admin contact email (this can be changed without modifying the views)
DEFAULT_CONTACT_EMAIL = ''



# your_project/settings.py

# Celery Configuration Options
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Use Redis as the broker
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'









