from django import forms
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm
from common.models import Qualification, SecurityCompliance
from .models import Pentest
from django.core.validators import MinLengthValidator


User = get_user_model()

class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()

    # Integer choices for role (Business = 1, Pentester = 2)
    role = forms.ChoiceField(choices=[(1, 'Borrower'), (2, 'Lander/investoer')])  # Integer values

    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'image', 'role', 'password1', 'password2']

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise forms.ValidationError("Email already exists.")
        return email

 








# Businece User profile update
class UserUpdateForm(forms.ModelForm):
    username = forms.CharField(required=True, disabled=True)
    email = forms.EmailField(required=True)
    qualifications = forms.ModelMultipleChoiceField(
        queryset=Qualification.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False
    )
    compliances = forms.ModelMultipleChoiceField(
        queryset=SecurityCompliance.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False
    )

    class Meta:
        model = User
        fields = [
            'username', 'first_name', 'last_name', 'email', 'image', 'bio',
            'qualifications', 'compliances', 'certifications_achievements',
            'company_description', 'company_website', 'number_of_employees',
            'industry', 'document', 'linkedin', 'facebook', 'twitter',
            'instagram'
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Ensure username field is read-only
        self.fields['username'].widget.attrs.update({'readonly': 'readonly'})
        self.fields['username'].label = 'Username'

        # Handle field data for multiple choice fields if needed
        if self.instance.pk:
            self.fields['qualifications'].initial = self.instance.qualifications.all()
            self.fields['compliances'].initial = self.instance.compliances.all()
        




















# Pentrest user profile update 
# Define choices for dropdown fields
ORGANIZATION_TYPE_CHOICES = [
    ('bank', 'Bank'),
    ('venture_capital', 'Venture Capital'),
    ('private_equity', 'Private Equity'),
    ('angel_investor', 'Angel Investor'),
]

INDUSTRY_CHOICES = [
    ('tech_software', 'Technology and Software'),
    ('healthcare_biotech', 'Healthcare and Biotechnology'),
    ('renewable_energy', 'Renewable Energy and Cleantech'),
]

class PentestProfileForm(forms.ModelForm):
    # Image field
    image = forms.ImageField(required=False)

    # Organization Details
    organization_name = forms.CharField(
        max_length=255, 
        required=False, 
        widget=forms.TextInput(attrs={'placeholder': 'Enter organization name'})
    )
    organization_website = forms.URLField(
        max_length=255, 
        required=False, 
        widget=forms.URLInput(attrs={'placeholder': 'Enter organization website'})
    )
    organization_type = forms.ChoiceField(
        choices=ORGANIZATION_TYPE_CHOICES, 
        required=False
    )

    # Investment Criteria
    minimum_investment = forms.DecimalField(
        max_digits=10, 
        decimal_places=2, 
        required=False, 
        widget=forms.NumberInput(attrs={'placeholder': 'Enter minimum investment'})
    )
    maximum_investment = forms.DecimalField(
        max_digits=10, 
        decimal_places=2, 
        required=False, 
        widget=forms.NumberInput(attrs={'placeholder': 'Enter maximum investment'})
    )
    industries_of_interest = forms.ChoiceField(
        choices=INDUSTRY_CHOICES, 
        required=False
    )

    # Social Media Links
    linkedin = forms.URLField(
        max_length=255, 
        required=False, 
        widget=forms.URLInput(attrs={'placeholder': 'Enter LinkedIn profile URL'})
    )
    twitter = forms.URLField(
        max_length=255, 
        required=False, 
        widget=forms.URLInput(attrs={'placeholder': 'Enter Twitter profile URL'})
    )
    facebook = forms.URLField(
        max_length=255, 
        required=False, 
        widget=forms.URLInput(attrs={'placeholder': 'Enter Facebook profile URL'})
    )
    instagram = forms.URLField(
        max_length=255, 
        required=False, 
        widget=forms.URLInput(attrs={'placeholder': 'Enter Instagram profile URL'})
    )

    class Meta:
        model = Pentest
        fields = [
            'image',  # Keep only the fields you need
            'organization_name', 
            'organization_website', 
            'linkedin', 
            'twitter', 
            'facebook', 
            'instagram',
            'minimum_investment', 
            'maximum_investment',
            'organization_type', 
            'industries_of_interest',
            'start_date', 
            'end_date', 
            'status',
            'required_qualifications', 
            'required_compliances'
        ]
        widgets = {
            'start_date': forms.DateInput(attrs={'type': 'date'}),
            'end_date': forms.DateInput(attrs={'type': 'date'}),
        }

    def save(self, commit=True, user=None):
        pentest = super().save(commit=False)
        if user:
            pentest.user = user
        if commit:
            pentest.save()
        return pentest


