# Generated by Django 5.1.1 on 2024-09-23 14:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('common', '0002_user'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image', models.ImageField(blank=True, default='profile_pics/default.png', null=True, upload_to='profile_pics/')),
                ('role', models.IntegerField(choices=[(1, 'Business'), (2, 'Pentester')], default=1)),
                ('bio', models.TextField(blank=True, null=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_code', models.CharField(blank=True, max_length=10, null=True)),
                ('verification_code_created_at', models.DateTimeField(blank=True, null=True)),
                ('token', models.CharField(blank=True, max_length=32, null=True)),
                ('certifications_achievements', models.TextField(blank=True, null=True)),
                ('linkedin', models.URLField(blank=True, max_length=255, null=True)),
                ('facebook', models.URLField(blank=True, max_length=255, null=True)),
                ('twitter', models.URLField(blank=True, max_length=255, null=True)),
                ('instagram', models.URLField(blank=True, max_length=255, null=True)),
                ('company_description', models.TextField(blank=True, null=True)),
                ('company_website', models.URLField(blank=True, max_length=255, null=True)),
                ('number_of_employees', models.IntegerField(blank=True, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='documents/')),
                ('industry', models.CharField(choices=[('technology_software', 'Technology and Software'), ('healthcare_biotechnology', 'Healthcare and Biotechnology'), ('renewable_energy_cleantech', 'Renewable Energy and Cleantech'), ('other', 'Other')], default='technology_software', max_length=255)),
                ('compliances', models.ManyToManyField(blank=True, related_name='users', to='common.securitycompliance')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('qualifications', models.ManyToManyField(blank=True, related_name='users', to='common.qualification')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pentest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('minimum_investment', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('maximum_investment', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('organization_name', models.CharField(blank=True, max_length=255, null=True)),
                ('organization_type', models.CharField(blank=True, choices=[('bank', 'Bank'), ('venture_capital', 'Venture Capital'), ('private_equity', 'Private Equity'), ('angel_investor', 'Angel Investor')], max_length=255, null=True)),
                ('organization_website', models.URLField(blank=True, max_length=255, null=True)),
                ('linkedin', models.URLField(blank=True, max_length=255, null=True)),
                ('facebook', models.URLField(blank=True, max_length=255, null=True)),
                ('twitter', models.URLField(blank=True, max_length=255, null=True)),
                ('instagram', models.URLField(blank=True, max_length=255, null=True)),
                ('industries_of_interest', models.CharField(blank=True, choices=[('tech_software', 'Technology and Software'), ('healthcare_biotech', 'Healthcare and Biotechnology'), ('renewable_energy', 'Renewable Energy and Cleantech')], max_length=255, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('required_compliances', models.ManyToManyField(blank=True, related_name='pentests', to='common.securitycompliance')),
                ('required_qualifications', models.ManyToManyField(blank=True, related_name='pentests', to='common.qualification')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pentester_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_id', models.CharField(max_length=255, unique=True)),
                ('active_till', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
