from django.db import models
from django.contrib.auth.models import AbstractUser
from PIL import Image
from django.conf import settings
from django.utils.timezone import make_aware
import datetime

class User(AbstractUser):
    BUSINESS = 1
    PENTESTER = 2
    ROLE_CHOICES = [
        (BUSINESS, 'Business'),
        (PENTESTER, 'Pentester'),
    ]
    image = models.ImageField(default='profile_pics/default.png', upload_to='profile_pics/', null=True, blank=True)
    role = models.IntegerField(choices=ROLE_CHOICES, default=BUSINESS)
    bio = models.TextField(blank=True, null=True, default='')
    qualifications = models.ManyToManyField("common.Qualification", related_name="users", blank=True)
    compliances = models.ManyToManyField("common.SecurityCompliance", related_name="users", blank=True)

    stripe_customer_id = models.CharField(max_length=255, null=True, blank=True, unique=True)
    is_verified = models.BooleanField(default=False)
    email = models.EmailField(unique=True)
    certifications_achievements = models.TextField(blank=True, null=True)
 
    # Social Media Links
    linkedin = models.URLField(max_length=255, blank=True, null=True)
    facebook = models.URLField(max_length=255, blank=True, null=True)
    twitter = models.URLField(max_length=255, blank=True, null=True)
    instagram = models.URLField(max_length=255, blank=True, null=True)

    # Additional fields for Business Users
    company_description = models.TextField(blank=True, null=True)
    company_website = models.URLField(max_length=255, blank=True, null=True)
    number_of_employees = models.IntegerField(blank=True, null=True)
    document = models.FileField(upload_to='documents/', null=True, blank=True)
    industry = models.CharField(
        max_length=255, 
        choices=[
            ('technology_software', 'Technology and Software'),
            ('healthcare_biotechnology', 'Healthcare and Biotechnology'),
            ('renewable_energy_cleantech', 'Renewable Energy and Cleantech'),
            ('other', 'Other'),
        ], 
        default='technology_software'
    )

    def __str__(self):
        return f'{self.username}'

    # ... [rest of your model code]


    def __str__(self):
        return f'{self.username}'

    def save(self, *args, **kwargs):
        super(User, self).save(*args, **kwargs)

        img = Image.open(self.image.path)

        if img.height > 300 or img.width > 300:
            output_size = (300, 300)
            img.thumbnail(output_size)
            img.save(self.image.path)

    @property
    def get_full_name(self):
        return f"{self.first_name} {self.last_name}"

    @property
    def get_image_url(self):
        if self.image:
            return self.image.url
        return f"{settings.MEDIA_URL}/no_image.jpg"

    @property
    def is_pentester(self):
        return self.role == 2

    @property
    def is_business(self):
        return self.role == 1

    @property
    def is_active_business(self):
        return self.role == 1 and self.has_active_subscription()

    @property
    def get_all_orders(self):
        if self.role == 2 and getattr(self, "orders_as_seller"):
            return self.orders_as_seller.all()
        elif self.role == 1 and getattr(self, "orders_as_buyer"):
            return self.orders_as_buyer.all()
        return ""

    @property
    def get_active_orders(self):
        if self.role == 2 and getattr(self, "orders_as_seller"):
            return self.orders_as_seller.filter(
              is_completed=False,
              is_cancelled=False,
              is_active=True
            )
        elif self.role == 1 and getattr(self, "orders_as_buyer"):
            return self.orders_as_buyer.filter(
              is_completed=False,
              is_cancelled=False,
              is_active=True
            )
        return ""

    def get_stripe_customer_id(self):
        from common.stripe import create_customer, get_customer

        if self.stripe_customer_id:
            res = get_customer(self.stripe_customer_id)
            if res.get("deleted"):
                return create_customer(self)
            return self.stripe_customer_id
        else:
            return create_customer(self)

    def get_active_subscription(self):
        return self.subscriptions.filter(active_till__gte=make_aware(datetime.datetime.now())).first()

    def has_active_subscription(self):
        return self.subscriptions.filter(active_till__gte=make_aware(datetime.datetime.now())).exists()


class Subscription(models.Model):
    subscription_id = models.CharField(max_length=255, unique=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="subscriptions")
    active_till = models.DateTimeField(auto_now_add=False, auto_now=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    @property
    def is_active(self):
        return make_aware(self.active_till) > make_aware(datetime.datetime.now())
    
class Pentest(models.Model):
    facebook = models.URLField(blank=True, null=True)
    required_qualifications = models.TextField(blank=True, null=True)
    required_compliances = models.TextField(blank=True, null=True)
    organization_website = models.URLField(blank=True, null=True)
    bio = models.TextField(blank=True, null=True)
    start_date = models.DateField(blank=True, null=True)
    organization_name = models.CharField(max_length=255, blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    maximum_investment = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    instagram = models.URLField(blank=True, null=True)
    minimum_investment = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    industries_of_interest = models.CharField(max_length=255, blank=True, null=True)
    organization_type = models.CharField(max_length=255, blank=True, null=True)
    linkedin = models.URLField(blank=True, null=True)
    twitter = models.URLField(blank=True, null=True)
    status = models.CharField(max_length=50, blank=True, null=True)
    def __str__(self):
        return self.organization_name