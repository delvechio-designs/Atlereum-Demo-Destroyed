from django.contrib import messages
from django.db.models import Q
from django.http import Http404, HttpRequest, HttpResponse, JsonResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.urls import reverse_lazy, reverse
from django.views.decorators.csrf import csrf_exempt
from django.views.generic import (CreateView, DetailView, ListView, UpdateView,View)

from chat.models import ChatRoom, Message
from common.stripe import create_charge_for_order, handle_webhook

from .models import Delivery, Offer, Order, Revision
from .forms import DeliveryCreateForm, RevisionCreateForm

# ==========Application Form===============
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .forms import ApplicationForm
from .models import FundingOpportunity, Application

# Create your views here.


class OrderListView(ListView):
    model = Order
    template_name = "dashboard/orders/list.html"

    def get_queryset(self):
        queryset = super().get_queryset()
        return queryset.filter(Q(buyer=self.request.user) | Q(seller=self.request.user))

class OrderDetailView(DetailView):
    model = Order
    template_name = "dashboard/orders/details.html"
    slug_field = "uid"
    slug_url_kwarg = "uid"

    def get_object(self, queryset=None):
        order = super().get_object(queryset)
        if order.buyer != self.request.user and order.seller != self.request.user:
            raise Http404("Order not found")
        return order

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["delivery_form"] = DeliveryCreateForm
        context["revision_form"] = RevisionCreateForm
        return context

class DeliveryCreateView(CreateView):
    model = Delivery
    # success_url = reverse_lazy("dashboard:FindWorkView")
    form_class = DeliveryCreateForm

    def get(self, request, *args, **kwargs):
        raise Http404()

    def get_success_url(self) -> str:
        order_uid = self.kwargs.get("order_uid")
        return reverse("orders:OrderDetailView", kwargs={"uid": order_uid})

    def form_valid(self, form):
        order_uid = self.kwargs.get("order_uid")
        order = get_object_or_404(Order, uid=order_uid)

        delivery = form.save(commit=False)
        delivery.order = order
        delivery.save()

        form.save_m2m()

        messages.success(self.request, "Order delivered successfully")
        return redirect(self.get_success_url())

class DeliveryApproveView(View):
    def post(self, request, order_uid):
        order = get_object_or_404(Order, uid=order_uid)

        latest_delivery = order.deliveries.all().order_by("-created_at").first()
        latest_delivery.is_accepted = True
        latest_delivery.save()

        messages.success(self.request, "Delivery approved successfully")
        return redirect(reverse("orders:OrderDetailView", kwargs={"uid": order_uid}))

class RevisionCreateView(CreateView):
    model = Revision
    form_class = RevisionCreateForm

    def get(self, request, *args, **kwargs):
        raise Http404()

    def get_success_url(self) -> str:
        order_uid = self.kwargs.get("order_uid")
        return reverse("orders:OrderDetailView", kwargs={"uid": order_uid})

    def form_valid(self, form):
        order_uid = self.kwargs.get("order_uid")
        order = get_object_or_404(Order, uid=order_uid)

        revision = form.save(commit=False)
        revision.order = order
        revision.save()

        form.save_m2m()

        messages.success(self.request, "Revision requested successfully")
        return redirect(self.get_success_url())

class OfferCreateView(CreateView):
    model = Offer
    success_url = reverse_lazy("dashboard:FindWorkView")
    fields = [
        "pentest",
        "description",
        "price",
        "delivery_time",
    ]

    def get(self, request):
        raise Http404()

    def form_valid(self, form):
        offer = form.save(commit=False)
        pentest = offer.pentest
        offer.seller = self.request.user
        offer.receiver = pentest.user
        offer.save()
        form.save_m2m()

        members = [offer.seller.username, offer.receiver.username]
        members.sort()
        room_name = f"{members[0]}_{members[1]}"
        room, created = ChatRoom.objects.get_or_create(name=room_name)
        Message.objects.create(
            room=room, sender=offer.seller, receiver=offer.receiver, offer=offer
        )
        messages.success(self.request, "Pentest created successfully")
        return redirect(self.success_url)


class WithdrawOfferView(View):
    def post(self, request, offer_id):
        offer = get_object_or_404(Offer, id=offer_id)
        if offer.seller == request.user:
            offer.is_active = False
            offer.save()
            messages.success(request, "Offer withdrawn successfully")
            previous_url = request.META.get("HTTP_REFERER")
            return redirect(previous_url)
        return HttpResponse("You dont have permission", status=401)


class AcceptOfferView(View):
    def post(self, request, offer_id):
        offer = get_object_or_404(Offer, id=offer_id)
        if offer.receiver == request.user and offer.is_active:
            session_url = create_charge_for_order(offer.id)
            return redirect(session_url)
            messages.success(request, "Offer accepted successfully")
            previous_url = request.META.get("HTTP_REFERER")
            return redirect(previous_url)
        return HttpResponse("You dont have permission", status=401)


@csrf_exempt
def webhook_view(request):
    payload = request.body
    sig_header = request.headers["STRIPE_SIGNATURE"]

    handle_webhook(payload, sig_header)

    return JsonResponse({"success": True})



# ================ Application Form ===================
from django.contrib import messages
from django.shortcuts import get_object_or_404, redirect, render
from .models import FundingOpportunity, Application
from .forms import ApplicationForm

def apply_for_funding(request, funding_id):
    funding_opportunity = get_object_or_404(FundingOpportunity, pk=funding_id)
    print(f"Funding Opportunity ID: {funding_opportunity.id}")  # Debugging line

    if not request.user.is_authenticated:
        messages.warning(request, 'You need to be logged in to apply for funding.')
        return redirect('dashboard:login')

    existing_application = Application.objects.filter(user=request.user, funding_opportunity=funding_opportunity).exists()
    print(f"Existing Application: {existing_application}")  # Debugging line

    if existing_application:
        messages.warning(request, 'You have already applied for this funding opportunity.')
        return redirect('dashboard:opportunity_detail', id=funding_opportunity.id)

    if request.method == 'POST':
        print("Form submitted")  # Debugging line
        form = ApplicationForm(request.POST, request.FILES)
        if form.is_valid():
            print("Form is valid")  # Debugging line
            application = form.save(commit=False)
            application.user = request.user
            application.funding_opportunity = funding_opportunity
            application.save()
            messages.success(request, 'Your application has been submitted successfully.')
            return redirect('dashboard:opportunity_detail', id=funding_opportunity.id)
        else:
            print("Form is not valid")  # Debugging line
            print(form.errors)  # Print the errors for debugging
            messages.error(request, 'There was an error submitting your application. Please check the form.')

    else:
        form = ApplicationForm(initial={'name': f"{request.user.first_name} {request.user.last_name}", 'email': request.user.email})

    return render(request, 'dashboard/orders/application_form.html', {
        'form': form,
        'funding_opportunity': funding_opportunity,
    })






# ======================applicaiton

from django.shortcuts import get_object_or_404
from django.views.generic import ListView, DetailView
from orders.models import Application

class ApplicationListView(ListView):
    model = Application
    template_name = 'dashboard/applications/application_list.html'
    context_object_name = 'applications'  # Pluralized for the list

# Application Delete

def application_delete(request, pk):
    application = get_object_or_404(Application, pk=pk)
    
    if request.method == 'POST':
        application.delete()
        # Optionally, add a success message
        messages.success(request, 'Application deleted successfully!')
        return redirect('orders:application_list')  # Redirect to the application list or another page
    
    # If not POST, just render a confirmation page or redirect
    return redirect('orders:application_list')


# Application Details Views

from django.http import Http404
import uuid

class ApplicationDetailView(DetailView):
    model = Application
    template_name = 'dashboard/applications/application_detail.html'
    context_object_name = 'application'  # This should be singular


    
    def get_object(self):
        requested_pk = self.kwargs['pk']
        application = get_object_or_404(Application, pk=requested_pk)
        print(f"Retrieved application: {application}, type: {type(application)}")
        return application









from django.views.generic import ListView
from orders.models import Application

class InvestorApplicationListView(ListView):
    model = Application
    template_name = 'dashboard/home.html'  # Ensure this path is correct
    context_object_name = 'applications'

    def get_queryset(self):
        # Only return applications that belong to the logged-in user and are not hidden
        return Application.objects.filter(user=self.request.user, is_hidden=False)  # Assuming `is_hidden` is the field used





