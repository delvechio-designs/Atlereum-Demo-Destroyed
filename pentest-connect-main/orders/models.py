from django.db import models
from django.contrib.auth import get_user_model
import uuid
import os
from dashboard.models import FundingOpportunity
from django.contrib.auth.models import User 


User = get_user_model()

# Create your models here.


class Offer(models.Model):
    # title = models.CharField(max_length=255)
    pentest = models.ForeignKey(
        "pentests.Pentest", on_delete=models.CASCADE, related_name="offers"
    )
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    seller = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="offers_as_seller"
    )
    receiver = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="offers_as_receiver"
    )
    delivery_time = models.PositiveIntegerField(help_text="Number of days for delivery")
    is_active = models.BooleanField(default=True)
    is_accepted = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


class Order(models.Model):
    uid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    offer = models.OneToOneField(Offer, on_delete=models.CASCADE, related_name="order")
    buyer = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="orders_as_buyer", null=True
    )
    seller = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="orders_as_seller", null=True
    )
    price = models.DecimalField(max_digits=10, decimal_places=2, null=True)
    delivery_time = models.PositiveIntegerField(
        help_text="Number of days for delivery", null=True
    )
    # delivery_file = models.FileField(upload_to="deliveries/", null=True, blank=True)
    is_completed = models.BooleanField(default=False)
    is_cancelled = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    completed_at = models.DateTimeField(auto_now_add=False, auto_now=False, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Order #{str(self.uid)}"


class Delivery(models.Model):
    order = models.ForeignKey(
        Order, on_delete=models.CASCADE, related_name="deliveries"
    )
    file = models.FileField(upload_to="deliveries/", null=True, blank=True)
    content = models.TextField()
    is_accepted = models.BooleanField(default=False)
    is_rejected = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Delivery for #{str(self.order.uid)}"

    @property
    def get_file_name(self):
        return os.path.basename(self.file.name)


class Revision(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="revisions")
    file = models.FileField(upload_to="revisions/", null=True, blank=True)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Revision for #{str(self.order.uid)}"

    @property
    def get_file_name(self):
        return os.path.basename(self.file.name)







import uuid

class Application(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
        ('in_review', 'In Review'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='applications')
    funding_opportunity = models.ForeignKey(FundingOpportunity, on_delete=models.CASCADE, related_name='applications')
    amount_offered = models.DecimalField(max_digits=10, decimal_places=2)
    proposal_description = models.TextField()
    attachment = models.FileField(upload_to='attachments/', null=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.funding_opportunity.company_name}"

