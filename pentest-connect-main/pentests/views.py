
from django.shortcuts import render, redirect
from django.views.generic import CreateView, ListView, UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from .models import Deal, Lender
from .forms import DealForm, LenderPreferencesForm
from django.contrib import messages

# List View for Deals - Displays all deals for the current user

from django.contrib.postgres.search import SearchVector
from django.db.models import Q

class DealListView(LoginRequiredMixin, ListView):
    model = Deal
    template_name = "dashboard/deals/list.html"

    def get_queryset(self):
        # Start with all deals for the user
        queryset = Deal.objects.filter(borrower=self.request.user)
        
        # Apply search functionality
        search_query = self.request.GET.get('search', '')
        if search_query:
            queryset = queryset.annotate(
                search=SearchVector('deal_name', 'description', 'location')
            ).filter(search=search_query)
        
        # Apply filtering by amount range
        min_amount = self.request.GET.get('min_amount', '')
        max_amount = self.request.GET.get('max_amount', '')
        if min_amount and max_amount:
            queryset = queryset.filter(amount__gte=min_amount, amount__lte=max_amount)
        
        # Apply filtering by interest rate
        interest_rate = self.request.GET.get('interest_rate', '')
        if interest_rate:
            queryset = queryset.filter(interest_rate=interest_rate)
        
        return queryset

    model = Deal
    template_name = "dashboard/deals/list.html"

    def get_queryset(self):
        return Deal.objects.filter(borrower=self.request.user)


# Create View for Deals - Allows borrowers to create new deals
class DealCreateView(LoginRequiredMixin, CreateView):
    model = Deal
    form_class = DealForm
    template_name = "dashboard/deals/create.html"
    success_url = "/deals/"

    def form_valid(self, form):
        deal = form.save(commit=False)
        deal.borrower = self.request.user
        deal.save()
        from notifications.notification_manager import NotificationManager
NotificationManager.notify_matching_lenders(deal)
        messages.success(self.request, "Deal created and matching lenders notified!")
        return super().form_valid(form)


# Update View for Lender Preferences - Allows lenders to set or update investment preferences
class LenderPreferencesUpdateView(LoginRequiredMixin, UpdateView):
    model = Lender
    form_class = LenderPreferencesForm
    template_name = "dashboard/lenders/preferences.html"
    success_url = "/dashboard/"

    def get_object(self, queryset=None):
        # Ensure only the current lender can update their profile
        return Lender.objects.get(user=self.request.user)

    def form_valid(self, form):
        messages.success(self.request, "Preferences updated successfully!")
        return super().form_valid(form)


from django.db.models import Q
from django.shortcuts import render
from .models import Deal, Lender

def search_view(request):
    query = request.GET.get('q', '')
    deals = Deal.objects.filter(
        Q(deal_name__icontains=query) |
        Q(description__icontains=query) |
        Q(location__icontains=query)
    )
    lenders = Lender.objects.filter(
        Q(name__icontains=query) |
        Q(preferred_location__icontains=query)
    )
    return render(request, 'dashboard/search_results.html', {
        'query': query,
        'deals': deals,
        'lenders': lenders
    })
