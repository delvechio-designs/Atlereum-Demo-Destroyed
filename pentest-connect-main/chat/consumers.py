import json

from channels.generic.websocket import AsyncWebsocketConsumer
from django.contrib.auth import get_user_model
from channels.db import database_sync_to_async

from .models import ChatRoom, Message

User = get_user_model()


class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope["url_route"]["kwargs"]["room_name"]
        self.room_group_name = "chat_%s" % self.room_name

        self.chat_room, created = await database_sync_to_async(
            ChatRoom.objects.get_or_create
        )(name=self.room_name)

        self.user1 = await database_sync_to_async(User.objects.get)(
            username=self.room_name.split("_")[0]
        )
        self.user2 = await database_sync_to_async(User.objects.get)(
            username=self.room_name.split("_")[1]
        )

        await database_sync_to_async(self.chat_room.members.add)(self.user1)
        await database_sync_to_async(self.chat_room.members.add)(self.user2)

        # Join room group
        await self.channel_layer.group_add(self.room_group_name, self.channel_name)

        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)

    async def receive(self, text_data):
        data = json.loads(text_data)
        message = data["message"]
        sender_username = data["sender"]

        if self.user1.username == sender_username:
            sender = self.user1
            receiver = self.user2
        elif self.user2.username == sender_username:
            sender = self.user2
            receiver = self.user1

        await database_sync_to_async(Message.objects.create)(
            room=self.chat_room, sender=sender, receiver=receiver, content=message
        )

        # Send message to room group
        await self.channel_layer.group_send(
            self.room_group_name,
            {"type": "chat_message", "message": message, "sender": sender_username},
        )

    async def chat_message(self, event):
        message = event["message"]
        sender = event["sender"]

        # Send message to WebSocket
        await self.send(
            text_data=json.dumps(
                {
                    "message": message,
                    "sender": sender,
                }
            )
        )


class OrderChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope["url_route"]["kwargs"]["room_name"]
        self.room_group_name = "order_chat_%s" % self.room_name

        self.chat_room, created = await database_sync_to_async(
            ChatRoom.objects.get_or_create
        )(name=self.room_name)

        usernames = self.room_name.replace("order_chat_", "").split("_")[:2]

        self.order_uid = self.room_name.replace("order_chat_", "").split("_")[-1]

        self.user1 = await database_sync_to_async(User.objects.get)(
            username=usernames[0]
        )
        self.user2 = await database_sync_to_async(User.objects.get)(
            username=usernames[1]
        )

        await database_sync_to_async(self.chat_room.members.add)(self.user1)
        await database_sync_to_async(self.chat_room.members.add)(self.user2)

        # Join room group
        await self.channel_layer.group_add(self.room_group_name, self.channel_name)

        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)

    async def receive(self, text_data):
        data = json.loads(text_data)
        message = data["message"]
        sender_username = data["sender"]

        if self.user1.username == sender_username:
            sender = self.user1
            receiver = self.user2
        elif self.user2.username == sender_username:
            sender = self.user2
            receiver = self.user1

        await database_sync_to_async(Message.objects.create)(
            room=self.chat_room, sender=sender, receiver=receiver, content=message
        )

        # Send message to room group
        await self.channel_layer.group_send(
            self.room_group_name,
            {"type": "chat_message", "message": message, "sender": sender_username},
        )

    async def chat_message(self, event):
        message = event["message"]
        sender = event["sender"]

        # Send message to WebSocket
        await self.send(
            text_data=json.dumps(
                {
                    "message": message,
                    "sender": sender,
                }
            )
        )
