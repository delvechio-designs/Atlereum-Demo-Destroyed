from django import forms
from django.conf import settings
from django.db import models
from django.utils import timezone 
from authentication.models import User

class Proposal(models.Model):
    PENDING = 'pending'
    REVIEWED = 'reviewed'
    ACCEPTED = 'accepted'
    REJECTED = 'rejected'

    STATUS_CHOICES = [
        (PENDING, 'Pending'),
        (REVIEWED, 'Reviewed'),
        (ACCEPTED, 'Accepted'),
        (REJECTED, 'Rejected'),
    ]
    
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='proposals')
    title = models.CharField(max_length=255)
    description = models.TextField()
    amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default=PENDING)
    submission_date = models.DateTimeField(auto_now_add=True)
    last_updated = models.DateTimeField(auto_now=True)
    old_status = models.CharField(max_length=50, null=True, blank=True)  # Track old status
    created_at = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        if self.pk:  # If updating an existing record
            old_instance = Proposal.objects.get(pk=self.pk)
            self.old_status = old_instance.status  # Track old status
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

# =========Funding Opperunit for leander & investor ===============
from assets.models import FundingRequest
class FundingOpportunity(models.Model):
    funding_request = models.OneToOneField('assets.FundingRequest', null=True, on_delete=models.CASCADE)  # Use string reference
    company_name = models.CharField(max_length=255)
    amount_requested = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    status = models.CharField(max_length=50, choices=[
        ('open', 'Open'),
        ('closed', 'Closed'),
        ('pending', 'Pending'),
    ])
    due_date = models.DateTimeField(null=False)
    short_description = models.TextField()
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)
    category = models.CharField(max_length=100, default='General')
    capital_user = models.ForeignKey(User, null=True, blank=True, on_delete=models.CASCADE, related_name='funding_opportunities')  # Temporarily allow null
    last_updated = models.DateTimeField(auto_now=True)


    def __str__(self):
        return self.company_name
    
# =============== Save Opportunity ================
class SavedOpportunity(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    funding_opportunity = models.ForeignKey(FundingOpportunity, on_delete=models.CASCADE)
    saved_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} saved {self.funding_opportunity.company_name}"
 