from django.db import models
from django.urls import reverse
from django.contrib.auth import get_user_model
from common.enums import AssetEnum
from django.conf import settings
from django.utils import timezone

User = get_user_model()

# Create your models here.


class Asset(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    type = models.IntegerField(choices=AssetEnum.get_choices(), default=AssetEnum.OTHER)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["-created_at", "-updated_at"]

    def __str__(self) -> str:
        return self.name

    @property
    def get_excerpt(self):
        return self.description[:150]

    @property
    def get_pentests(self):
        return self.pentests.all()

    def get_absolute_url(self):
        return reverse("assets:AssetDetailView", kwargs={"pk": self.pk})

# ==================== Funding Request==============

class FundingRequest(models.Model):
    CATEGORY_CHOICES = [
        ('technology', 'Technology and Software'),
        ('healthcare', 'Healthcare and Biotechnology'),
        ('renewable_energy', 'Renewable Energy and Cleantech'),
        ('others', 'Others'),
    ]

    title = models.CharField(max_length=255)
    description = models.TextField()
    amount_requested = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=50, choices=[
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected')
    ])
    category = models.CharField(max_length=50, choices=CATEGORY_CHOICES, null=True)  # Allow null for now
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="funding_requests")
    old_status = models.CharField(max_length=50, null=True, blank=True)  # Optional for tracking previous status
    due_date = models.DateTimeField(null=False, default=timezone.now)

    class Meta:
        ordering = ["-created_at"]

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        # Track the old status before saving
        if self.pk:  # Check if the instance already exists
            old_instance = FundingRequest.objects.get(pk=self.pk)
            self.old_status = old_instance.status  # Save old status for notification purposes

        # Save the instance
        super().save(*args, **kwargs)

        # Update the corresponding FundingOpportunity if status changed
        if self.pk and self.old_status != self.status:
            from dashboard.models import FundingOpportunity  # Import here to avoid circular import
            try:
                funding_opportunity = FundingOpportunity.objects.get(funding_request=self)
                funding_opportunity.status = 'open' if self.status == 'approved' else 'closed'
                funding_opportunity.save()
            except FundingOpportunity.DoesNotExist:
                pass  # Handle case where no matching FundingOpportunity exists

# ================ Proposal Models ==================
class Proposal(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    old_status = models.CharField(max_length=20, null=True, blank=True)  # Track old status
    
    created_at = models.DateTimeField(auto_now_add=True)  # Automatically set when created
    updated_at = models.DateTimeField(auto_now=True)  # Automatically updated when the object is updated

    def save(self, *args, **kwargs):
        if self.pk:  # If updating an existing record
            old_instance = Proposal.objects.get(pk=self.pk)
            self.old_status = old_instance.status  # Track old status
        super().save(*args, **kwargs)
    
    def __str__(self):
        return self.title
