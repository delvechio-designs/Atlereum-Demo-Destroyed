from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse_lazy
from django.contrib import messages
from django.http import Http404
from django.views.generic import CreateView, ListView, UpdateView, DetailView

from .models import Asset
from common.enums import AssetEnum



from django.urls import reverse_lazy  # Import reverse_lazy
from django.views.generic.edit import CreateView
from django.views.generic import ListView
from django.shortcuts import get_object_or_404, redirect
from .models import FundingRequest
# Create your views here.

class AssetListView(ListView):
    model = Asset
    template_name = "dashboard/assets/list.html"

    def get_queryset(self):
        AssetEnum.get_choices()
        queryset = super().get_queryset()
        return queryset.filter(user=self.request.user)

class AssetCreateView(CreateView):
    model = Asset
    template_name = "dashboard/assets/create.html"
    fields = [
      "name",
      "description",
      "type",
    ]

    def form_valid(self, form):
        asset = form.save(commit=False)
        asset.user = self.request.user
        asset.save()
        messages.success(self.request, "Asset created successfully")
        return redirect(asset.get_absolute_url())

class AssetUpdateView(UpdateView):
    model = Asset
    success_url = reverse_lazy("assets:AssetListView")
    template_name = "dashboard/assets/update.html"
    fields = [
      "name",
      "description",
      "type",
    ]

    def get_success_url(self):
        messages.success(self.request, "Asset updated successfully")
        return super().get_success_url()

class AssetDetailView(DetailView):
    model = Asset
    template_name = "dashboard/assets/details.html"

    def dispatch(self, request, *args, **kwargs):
        asset = self.get_object()
        if not request.user == asset.user:
            raise Http404()
        return super().dispatch(request, *args, **kwargs)
    



# ============Funding request =================
class FundingRequestCreateView(CreateView):
    model = FundingRequest
    fields = ['title', 'description', 'amount_requested', 'category']
    template_name = 'dashboard/assets/create_funding_request.html'
    success_url = reverse_lazy('assets:active_funding_requests')  # Prefix with app_name

    def form_valid(self, form):
        form.instance.user = self.request.user
        form.instance.status = 'pending'  # Automatically set status to pending
        return super().form_valid(form)

class ActiveFundingRequestView(ListView):
    model = FundingRequest
    template_name = 'dashboard/assets/active_funding_requests.html'
    context_object_name = 'funding_requests'

    def get_queryset(self):
        return FundingRequest.objects.filter(user=self.request.user)

class FundingRequestAdminView(ListView):
    model = FundingRequest
    template_name = 'dashboard/admin_funding_requests.html'

    def get_queryset(self):
        return FundingRequest.objects.all()  # Admin can view all requests






