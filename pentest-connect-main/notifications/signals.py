from django.db.models.signals import post_save
from django.dispatch import receiver
from notifications.models import Notification, Message
from assets.models import FundingRequest 
from notifications.utils import send_notification
from dashboard.models import FundingOpportunity, Proposal
from datetime import datetime 
from orders.models import Application, Order
from django.contrib.auth import get_user_model
from django.utils import timezone
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync

# Get the user model
User = get_user_model()

# Function to create and send notifications
def create_and_send_notification(user, title, description, link=None):
    try:
        notification = Notification(
            user=user,
            title=title,
            description=description,
            created_at=timezone.now()
        )
        notification.save()
        print(f"New notification created for user {user.id}: {description}")

        # Send real-time notification via WebSocket
        send_notification(user.id, {
            'title': title,
            'description': description,
            'created_at': notification.created_at.strftime("%Y-%m-%d %H:%M:%S"),
            'link': link,
        })
    except Exception as e:
        print(f"Error creating/sending notification for user {user.id}: {e}")

# ================== Notify All Logged-In Users ===================
def notify_all_logged_in_users(instance):
    # Get the list of all logged-in users
    online_users = User.objects.filter(is_active=True)  # Adjust this filter as per your requirement
    for user in online_users:
        send_notification(user.id, {
            'title': 'Funding Status Update',
            'description': f'The funding request "{instance.title}" status changed to: {instance.status}',
            'link': f'/funding_requests/{instance.id}/'  # Adjust the link based on your application structure
        })
        print(f"Notification sent to user {user.username} for funding request: {instance.title}")

# ================== Funding Status Change Notifications ===================
@receiver(post_save, sender=FundingRequest)
def notify_user_on_funding_status_change(sender, instance, created, **kwargs):
    if not created and hasattr(instance, 'old_status') and instance.old_status != instance.status:
        print(f"FundingRequest status changed: {instance.title} - {instance.old_status} to {instance.status}")
        _send_funding_status_notifications(instance)

def _send_funding_status_notifications(instance):
    user = instance.user
    if instance.status in ['approved', 'closed']:
        print(f"Notifying all logged-in users for funding request: {instance.title}")
        notify_all_logged_in_users(instance)  # Call the function to notify all users
    elif instance.status == 'rejected':
        create_and_send_notification(user, 'Funding Status Changed',
                                      f'The funding request "{instance.title}" status changed to: {instance.status}')

# ================== Proposal Status Change Notifications ===================
@receiver(post_save, sender=Proposal)
def notify_user_on_proposal_status_change(sender, instance, created, **kwargs):
    if not created and hasattr(instance, 'old_status') and instance.old_status != instance.status:
        print(f"Proposal {instance.id} updated. Sending notification.")
        _send_proposal_status_notifications(instance)

def _send_proposal_status_notifications(instance):
    user = instance.user
    create_and_send_notification(user, 'Proposal Status Changed',
                                  f'The proposal "{instance.title}" status changed to: {instance.status}')

# ================== Order Status Change Notifications ===================
@receiver(post_save, sender=Order)
def notify_user_on_order_status_change(sender, instance, created, **kwargs):
    if not created and hasattr(instance, 'old_status') and instance.old_status != instance.status:
        _send_order_status_notifications(instance)

def _send_order_status_notifications(instance):
    user = instance.user
    create_and_send_notification(user, 'Order Status Changed',
                                  f'The order "{instance.title}" status changed to: {instance.status}')

# ================== Application Notifications ===================
@receiver(post_save, sender=Application)
def notify_users_on_application(sender, instance, created, **kwargs):
    if created:
        capital_user = instance.funding_opportunity.capital_user
        lender_user = instance.user
        print(f"New application from {lender_user.username} for {instance.funding_opportunity.company_name}.")
        
        # Notify capital user
        if capital_user:
            create_and_send_notification(capital_user, 'New Application Received',
                                          f'You have received a new application from {lender_user.username} for {instance.funding_opportunity.company_name}.')
        
        # Notify lender user
        if lender_user != capital_user:
            create_and_send_notification(lender_user, 'Application Submitted',
                                          f'Your application for {instance.funding_opportunity.company_name} has been submitted.')

# ================== Message Notifications ===================
@receiver(post_save, sender=Message)
def send_message_notification(sender, instance, created, **kwargs):
    if created:
        create_and_send_notification(instance.receiver,
                                      'New Message Received',
                                      f'You have received a new message from {instance.sender.username}: {instance.content}',
                                      link=f'/messages/{instance.id}')
    